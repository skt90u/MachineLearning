#install.packages('e1071')
library(e1071)
regressor = svm(formula = Salary ~.,
data = dataset)
y_pred = predict(regressor, data.frame(Level = 6.5))
y_pred
View(dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
setwd("~/Desktop/Machine Learning A-Z/Part 2 - Regression/Section 8 - Decision Tree Regression")
X = dataset[:, 2:3]
dataset = read.csv('Position_Salaries.csv')
X = dataset[:, 2:3]
X = dataset[, 2:3]
View(X)
install.packages('rpart')
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
View(dataset)
y_pred = predict(regressor, data.frame(Level = 6.5))
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
#install.packages('rpart')
library(rpart)
regressor <- rpart(formula = Salary ~.,
data = dataset)
y_pred = predict(regressor, data.frame(Level = 6.5))
View(dataset)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
#install.packages('rpart')
library(rpart)
regressor <- rpart(formula = Salary ~.,
data = dataset,
control = rpart.control(minsplit = 1))
y_pred = predict(regressor, data.frame(Level = 6.5))
len(dataset)
length(dataset)
View(dataset)
View(dataset)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
#install.packages('rpart')
library(rpart)
regressor <- rpart(formula = Salary ~.,
data = dataset,
control = rpart.control(minsplit = 10))
y_pred = predict(regressor, data.frame(Level = 6.5))
View(dataset)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
#install.packages('rpart')
library(rpart)
regressor <- rpart(formula = Salary ~.,
data = dataset,
control = rpart.control(minsplit = 1))
y_pred = predict(regressor, data.frame(Level = 6.5))
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
#install.packages('rpart')
library(rpart)
regressor <- rpart(formula = Salary ~.,
data = dataset,
control = rpart.control(minsplit = 1))
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# Plotting the tree
plot(regressor)
text(regressor)
# Decision Tree Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Decision Tree Regression to the dataset
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicting a new result with Decision Tree Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Tree Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# Plotting the tree
plot(regressor)
text(regressor)
# Decision Tree Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Decision Tree Regression to the dataset
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicting a new result with Decision Tree Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Tree Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# Plotting the tree
#plot(regressor)
#text(regressor)
# Decision Tree Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Decision Tree Regression to the dataset
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 10))
# Predicting a new result with Decision Tree Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Tree Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# Plotting the tree
#plot(regressor)
#text(regressor)
# Decision Tree Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Decision Tree Regression to the dataset
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicting a new result with Decision Tree Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Tree Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# Plotting the tree
#plot(regressor)
#text(regressor)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
class(x_grid)
# Decision Tree Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Decision Tree Regression to the dataset
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 10))
# Predicting a new result with Decision Tree Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Tree Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# Plotting the tree
#plot(regressor)
#text(regressor)
# Decision Tree Regression
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Decision Tree Regression to the dataset
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicting a new result with Decision Tree Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Tree Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
# Plotting the tree
#plot(regressor)
#text(regressor)
setwd("~/Desktop/Machine Learning A-Z/Part 2 - Regression/Section 9 - Random Forest Regression")
dataset = read.csv('Position_Salaries.csv')
typeof(dataset)
View(dataset)
X = dataset[:, 1]
X = dataset[, 1]
X
X = dataset[, 1:2]
View(X)
X = dataset[, 2:3]
dataset_1 = dataset[, 2:3]
dataset = read.csv('Position_Salaries.csv')
typeof(dataset)
class(dataset)
summary(dataset)
#dataset_1 = dataset[, 2:3]
str(dataset)
summary(dataset)
help.search('random')
help.search('randomForset')
install.packages('randomForest')
library(randomForest)
library(randomForest)
dataset[1]
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
dataset[1]
dataset[0]
dataset[2]
dataset$Level
typeof(dataset$Level)
class(dataset$Level)
y_pred = predict(regressor, 6.5)
library(randomForest)
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10)
y_pred = predict(regressor, 6.5)
y_pred = predict(regressor, data.frame(Level = 6.5))
y_pred = predict(regressor, c(1,2,3))
y_pred = predict(regressor, data.frame(Level = 6.5))
dataset[-2]
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[-2],
y = dataset$Salary,
ntree = 500)
# Predicting a new result with Random Forest Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Random Forest Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression)') +
xlab('Level') +
ylab('Salary')
a = c(1)
a
a.append(2)
function (seed, kind = NULL, normal.kind = NULL)
{
kinds <- c("Wichmann-Hill", "Marsaglia-Multicarry", "Super-Duper",
"Mersenne-Twister", "Knuth-TAOCP", "user-supplied",
"Knuth-TAOCP-2002", "L'Ecuyer-CMRG", "default")
n.kinds <- c("Buggy Kinderman-Ramage", "Ahrens-Dieter",
"Box-Muller", "user-supplied", "Inversion", "Kinderman-Ramage",
"default")
}
function (seed, kind = NULL, normal.kind = NULL, abc.e = NULL)
{
kinds <- c("Wichmann-Hill", "Marsaglia-Multicarry", "Super-Duper",
"Mersenne-Twister", "Knuth-TAOCP", "user-supplied",
"Knuth-TAOCP-2002", "L'Ecuyer-CMRG", "default")
n.kinds <- c("Buggy Kinderman-Ramage", "Ahrens-Dieter",
"Box-Muller", "user-supplied", "Inversion", "Kinderman-Ramage",
"default")
}
s = function (seed, kind = NULL, normal.kind = NULL, abc.e = NULL)
{
kinds <- c("Wichmann-Hill", "Marsaglia-Multicarry", "Super-Duper",
"Mersenne-Twister", "Knuth-TAOCP", "user-supplied",
"Knuth-TAOCP-2002", "L'Ecuyer-CMRG", "default")
n.kinds <- c("Buggy Kinderman-Ramage", "Ahrens-Dieter",
"Box-Muller", "user-supplied", "Inversion", "Kinderman-Ramage",
"default")
}
s(123)
as.integer(1L)
kinds <- c("Wichmann-Hill", "Marsaglia-Multicarry", "Super-Duper",
"Mersenne-Twister", "Knuth-TAOCP", "user-supplied",
"Knuth-TAOCP-2002", "L'Ecuyer-CMRG", "default")
kind = "1"
pmatch(kind, kinds)
pmatch("Wichmann-Hill", kinds)
pmatch("Wichmann-Hill", kinds)-1
is.na(pmatch("Wichmann-Hill", kinds)-1)
is.na(pmatch("Wichmann-Hillx", kinds)-1)
stop(gettextf("'%s' is not a valid abbreviation of an RNG",
kind), domain = NA)
stop(gettextf("'%s' is not a valid abbreviation of an RNG",
kind))
a <- c(1,2,5.3,6,-2,4)
a <- c(1,2,5.3,6,-2,4)
a.append
a <- c(1)
append(a, 2)
a = c(1)
a = append(a, 2)
a = c(1)
a = append(a, 2)
a = append(a, 3, 0)
a = c(1)
a = append(a, 2)
a = append(a, 3, 0)
cat(a)
a = c(1)
a = append(a, 2)
a = append(a, 3, 0)
cat(a)
str(a)
diff(a)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
typeof(dataset)
class(dataset)
summary(dataset)
str(dataset)
cat(dataset)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
typeof(dataset)
class(dataset)
summary(dataset)
str(dataset)
cat(dataset)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
typeof(dataset)
class(dataset)
summary(dataset)
str(dataset)
#cat(dataset)
builtins()
dir()
builtins()
options()
?NA
txt <- c("arm","foot","lefroo", "bafoobar")
grep("foo", txt)
length(i <- grep("foo", txt))
if(length(i <- grep("foo", txt)))
if(length(i <- grep("foo", txt)))
cat("'foo' appears at least once in\n\t", txt, "\n")
builtins()
str(builtins())
a = str(builtins())
a <- str(builtins())
a <- builtins()
builtins()
builtins()
x = data.frame(builtins())
View(x)
x = data.frame(builtins())
View(x)
demo
demo()
demo('error.catching')
str(c)
summary(c)
summary(summary
summary(summary)
summary(summary)
summary(a)
mkjunction
baseenv
asfunction
attr
basename
body
switch
x <- rcauchy(10)
x <- rcauchy(10)
centre <- function(x, type) {
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
centre(x, "mean")
methods(summary)
dat
method(sum)
methods(sum)
methods('sum')
methods('summary')
mean
